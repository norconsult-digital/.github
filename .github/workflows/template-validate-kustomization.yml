# Validate kustomization.yaml files in applications directory

name: Validate kustomization
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      subscription_id:
        required: false
        type: string
      acr_name:
        required: false
        type: string

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  validate-kustomization:
    if: github.event_name != 'pull_request' || (github.event_name == 'pull_request' && github.event.pull_request.state == 'open')
    runs-on: private-ubuntu-runner
    environment: validate-kustomization
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Log in with Azure
        uses: azure/login@v2
        if: ${{ inputs.subscription_id != '' }}
        with:
          client-id: 7afd61a6-ea86-467a-8b46-7ebc2d07a52d
          tenant-id: '5546488e-16ae-4971-ba91-b12a928efaf8'
          subscription-id: ${{ inputs.subscription_id }}

      - name: Log in to the Azure Container Registry
        if: ${{ inputs.acr_name != '' }}
        run: |
          az acr login --name ${{ inputs.acr_name }}

      - name: Validate changed files
        id: validate_changed_files
        run: ./assets/scripts/validate_kustomization.sh
        env:
          TARGET_BRANCH: ${{ github.event.pull_request.base.ref }}
          PR_BRANCH: ${{ github.head_ref }}
          ENVIRONMENT: ${{ inputs.environment }}

      - name: Update PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && ( success() || failure() )
        env:
          SUMMARY: "${{ steps.validate_changed_files.outputs.summary }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
            const run_link = '<a href="' + run_url + '">Actions</a>.'
            const commentIdentifier = "<!-- ACTION COMMENT KUSTOMIZE ${{ inputs.environment }} -->"; // Unique identifier for the action comment
            const summary_string = commentIdentifier + "\n" + fs.readFileSync('./summary.md', { encoding: 'utf8' });
            const summary = summary_string.length > 65000 ? summary_string.toString().substring(0, 65000) + " ... \n``` \n</details>Output is too long and was truncated. You can read full summary here: " + run_link + "<br /><br />" : summary_string

            // Get all comments for the pull request
            const comments =
              await github.rest.issues.listComments({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
              })

            // Filter out the comments that were previously created by this action
            const botComments = comments.data.filter(comment => comment.body.includes(commentIdentifier) && comment.user.type === "Bot");

            // Loop through previous comments to mark them as outdated
            for (const comment of botComments) {
              const minimizeCommentMutation = `
                mutation($subjectId: ID!, $classifier: ReportedContentClassifiers!) {
                  minimizeComment(input: {subjectId: $subjectId, classifier: $classifier}) {
                    minimizedComment {
                      isMinimized
                      minimizedReason
                    }
                  }
                }
              `;

              const variables = {
                subjectId: comment.node_id,  // Replace with the actual comment ID
                classifier: "OUTDATED"  // You can choose from the available classifiers
              };

              // Query graphql to minimize comment
              await github.graphql(minimizeCommentMutation, variables);
            }

            // Add a new comment to the PR
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            })
