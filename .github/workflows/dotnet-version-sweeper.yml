name: "dotnet version checker"

on:
  workflow_call:
    inputs:
      support:
        description: "The support level to target (STS, LTS, or Preview)."
        type: string
        required: true
        default: "STS"

jobs:
  version-sweep:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: write
    env:
      SUPPORT_LEVEL: ${{ inputs.support }} 

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 
          
      - name: List all files in workspace for debugging
        run: ls -R $GITHUB_WORKSPACE
      
      - name: Setup .NET 9 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
          
      - name: Run tests
        run: dotnet test "$GITHUB_WORKSPACE/fluent-assertions-alternatives/Shouldly.Test/Shouldly.Test.csproj"

      - name: .NET version sweeper
        id: dotnet-version-sweeper
        uses: dotnet/versionsweeper@v4.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          owner: ${{ github.repository_owner }}
          name: ${{ github.repository }}
          branch: ${{ github.ref }}

      # Add this step before your "Create pull requests" step
      - name: Configure Git User
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
             
      - name: Create pull requests
        if: steps.dotnet-version-sweeper.outputs.has-remaining-work == 'true'
        env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x
         
          # Install jq if not available (optional)
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

          
          # Parse the JSON array of projects into a bash array
          upgradeProjectsJson='${{ steps.dotnet-version-sweeper.outputs.upgrade-projects }}'

          # Check if upgradeProjectsJson is empty or null
          if [[ -z "$upgradeProjectsJson" || "$upgradeProjectsJson" == "null" || "$upgradeProjectsJson" == "[]" ]]; then
            echo "No projects to upgrade"
            exit 0
          fi

          mapfile -t upgradeProjects < <(echo "$upgradeProjectsJson" | jq -r '.[]')

          # Check if array is empty
          if [[ ${#upgradeProjects[@]} -eq 0 ]]; then
            echo "No projects to upgrade"
            exit 0
          fi

          echo "Projects to upgrade: ${upgradeProjects[*]}"

        
          # Define target framework based on support level
          case "${{ inputs.support }}" in
            "STS") TARGET_FRAMEWORK="net9.0" ;;
            "LTS") TARGET_FRAMEWORK="net8.0" ;;
            "Preview") TARGET_FRAMEWORK="net10.0" ;;
            *) TARGET_FRAMEWORK="net9.0" ;;
          esac

          echo "Target framework: $TARGET_FRAMEWORK"

          # Store the base branch
          baseBranch=$(git rev-parse --abbrev-ref HEAD)


          # Iterate all upgrade projects
          for projectPath in "${upgradeProjects[@]}"; do
            echo "Processing project: $projectPath"

              # Convert absolute path to relative path by removing /github/workspace/
              relativePath="${projectPath#/github/workspace/}"
      
              echo "Relative path: $relativePath"
      
              # Check if the file actually exists
              if [[ ! -f "$relativePath" ]]; then
                echo "Project file does not exist: $relativePath, skipping..."
                continue
                fi

                echo "Upgrading project: $relativePath"

                # Check current target framework
                currentFramework=$(grep -oP '<TargetFramework>\K[^<]*' "$relativePath" 2>/dev/null || echo "unknown")
                echo "Current framework: $currentFramework"
                echo "Target framework: $TARGET_FRAMEWORK"

                # Skip if already on target framework
                if [[ "$currentFramework" == "$TARGET_FRAMEWORK" ]]; then
                  echo "Project $relativePath is already on $TARGET_FRAMEWORK, skipping..."
                  continue
                fi

                # Return to base branch before creating new branch
                git checkout "$baseBranch"
                git pull origin "$baseBranch"

                # Sanitize branch name: get only the folder or project filename without extension
                safeBranchName=$(basename "$relativePath" .csproj)
                branchName="upgrade/$safeBranchName-$(date +%s)" 


                # Create a new branch with the sanitized name
                git checkout -b "$branchName" 

                # Manually upgrade the project file
                echo "Manually upgrading $relativePath from $currentFramework to $TARGET_FRAMEWORK"
      
                # Backup the original file
                cp "$relativePath" "$relativePath.backup"
      
                # Update TargetFramework
                sed -i "s|<TargetFramework>[^<]*</TargetFramework>|<TargetFramework>$TARGET_FRAMEWORK</TargetFramework>|g" "$relativePath"
      
                # Also handle TargetFrameworks (plural) for multi-targeting projects
                sed -i "s|<TargetFrameworks>[^<]*</TargetFrameworks>|<TargetFrameworks>$TARGET_FRAMEWORK</TargetFrameworks>|g" "$relativePath"
      
                # Show the changes made
                echo "Changes made to $relativePath:"
                diff "$relativePath.backup" "$relativePath" || true
      
                # Clean up backup
                rm "$relativePath.backup"

                # Try to restore packages to validate the upgrade
                echo "Restoring packages for $relativePath"
                if dotnet restore "$relativePath"; then
                  echo "✅ Package restore successful"
                else
                  echo "⚠️  Package restore failed, but continuing with PR creation"
                fi

                # Check if there are any changes to commit
                if git diff --quiet && git diff --staged --quiet; then
                  echo "No changes made for $relativePath, skipping..."
                  git checkout "$baseBranch"
                  git branch -D "$branchName"
                  continue
                fi

       
                  # Commit the changes
                  git add .
                  git commit -m ".NET Version Sweeper: Upgraded $relativePath from $currentFramework to $TARGET_FRAMEWORK"

                  # Push the branch to the repository
                  git push origin "$branchName"


                   # Create a pull request
                   gh pr create \
                     --base "$baseBranch" \
                     --head "$branchName" \
                     --title "Upgrade $safeBranchName to .NET $TARGET_FRAMEWORK (${{ inputs.support }})" \
                     --body "Automated upgrade for $relativePath from $currentFramework to $TARGET_FRAMEWORK (.NET ${{ inputs.support }} support level)"

             - Updated TargetFramework from \`$currentFramework\` to \`$TARGET_FRAMEWORK\`         

                  echo "✅ Successfully created PR for $relativePath"
               done
