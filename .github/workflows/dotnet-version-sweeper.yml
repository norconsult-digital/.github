name: "dotnet version checker"

on:
  workflow_call:
    inputs:
      support:
        description: "The support level to target (STS, LTS, or Preview)."
        type: string
        required: true
        default: "STS"

jobs:
  version-sweep:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 
          
      - name: List all files in workspace for debugging
        run: ls -R $GITHUB_WORKSPACE
      
      - name: Setup .NET 9 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
          
      - name: .NET version sweeper
        id: dotnet-version-sweeper
        uses: dotnet/versionsweeper@v4.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          owner: ${{ github.repository_owner }}
          name: ${{ github.repository }}
          branch: ${{ github.ref }}

      # Add this step before your "Create pull requests" step
      - name: Configure Git User
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
             
      - name: LTS expiration and standard upgrade check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x 

          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Define .NET LTS versions and their end-of-life dates
          declare -A lts_versions=(
            ["net6.0"]="2024-11-12"   # .NET 6 LTS expires November 12, 2024
            ["net8.0"]="2026-11-10"   # .NET 8 LTS expires November 10, 2026
          )

          # Get current date in seconds since epoch
          current_date=$(date +%s)
          # Calculate date 90 days from now
          warning_date=$((current_date + 90*24*60*60))

          echo "üîç Checking for LTS versions expiring within 90 days..."

          # Initialize variables
          expiring_projects=""
          lts_issue_created=false

          # Find all .csproj files and check for expiring LTS versions
          find . -name "*.csproj" -type f | while read -r projectFile; do
            echo "üìÅ Checking project: $projectFile"
            
            # Extract TargetFramework from project file
            currentFramework=$(grep -oP '<TargetFramework>\K[^<]*' "$projectFile" 2>/dev/null || echo "")

            if [[ -n "$currentFramework" && -n "${lts_versions[$currentFramework]}" ]]; then
              # Convert end-of-life date to seconds since epoch
              eol_date=$(date -d "${lts_versions[$currentFramework]}" +%s)
              
              # Check if EOL is within 90 days
              if [[ $eol_date -le $warning_date ]]; then
                days_until_eol=$(( (eol_date - current_date) / 86400 ))
                
                echo "‚ö†Ô∏è  WARNING: $projectFile uses $currentFramework which expires in $days_until_eol days (${lts_versions[$currentFramework]})"
                
                # Add to expiring projects list
                relative_path="${projectFile#./}"
                if [[ -z "$expiring_projects" ]]; then
                  expiring_projects="$relative_path|$currentFramework|$days_until_eol|${lts_versions[$currentFramework]}"
                else
                  expiring_projects="$expiring_projects;$relative_path|$currentFramework|$days_until_eol|${lts_versions[$currentFramework]}"
                fi
              else
                days_until_eol=$(( (eol_date - current_date) / 86400 ))
                echo "‚úÖ $projectFile uses $currentFramework which expires in $days_until_eol days (${lts_versions[$currentFramework]})"
              fi
            elif [[ -n "$currentFramework" ]]; then
              echo "‚ÑπÔ∏è  $projectFile uses $currentFramework (not an LTS version or unknown EOL date)"
            fi
          done

          # Create LTS expiration warning issue if needed
          if [[ -n "$expiring_projects" ]]; then
            echo "üö® Found LTS versions expiring within 90 days, creating issue..."
            
            issueTitle="‚ö†Ô∏è URGENT: LTS .NET Versions Expiring Within 90 Days - $(date +%Y-%m-%d)"
            issueBody="## üö® LTS .NET Version Expiration Warning


           # Parse expiring projects and add to issue body
            echo "$expiring_projects" | while IFS='|' read -r project framework days_left eol_date; do
              if [[ $days_left -lt 0 ]]; then
                status="üî¥ **EXPIRED**"
                days_text="Expired $((-days_left)) days ago"
              elif [[ $days_left -le 30 ]]; then
                status="üü° **CRITICAL**"
                days_text="$days_left days remaining"
              else
                status="üü† **WARNING**"
                days_text="$days_left days remaining"
              fi  

              issueBody="${issueBody}
          - [ ] $status **$project**
            - Current: \`$framework\`
            - End of Life: \`$eol_date\`
            - Time Remaining: \`$days_text\`"
            done

           # Create the issue
          gh issue create \
              --title "$issueTitle" \
              --body "$issueBody" \
              --label "critical,lts-expiring"

            echo "‚úÖ Successfully created LTS expiration warning issue: $issueTitle"
            lts_issue_created=true
             else
            echo "‚úÖ No LTS versions expiring within 90 days found."
             fi

          # Now handle standard version upgrades from dotnet versionsweeper
          upgradeProjectsJson='${{ steps.dotnet-version-sweeper.outputs.upgrade-projects }}'

          # Check if we have regular upgrades to process
          if [[ -n "$upgradeProjectsJson" && "$upgradeProjectsJson" != "null" && "$upgradeProjectsJson" != "[]" ]]; then
            
            mapfile -t upgradeProjects < <(echo "$upgradeProjectsJson" | jq -r '.[]')

            # Check if array is empty
            if [[ ${#upgradeProjects[@]} -gt 0 ]]; then
              
              echo "Projects to upgrade: ${upgradeProjects[*]}"

              # Define target framework based on support level
              case "${{ inputs.support || 'STS' }}" in
                "STS") TARGET_FRAMEWORK="net9.0" ;;
                "LTS") TARGET_FRAMEWORK="net8.0" ;;
                "Preview") TARGET_FRAMEWORK="net10.0" ;;
                *) TARGET_FRAMEWORK="net9.0" ;;
              esac

              echo "Target framework: $TARGET_FRAMEWORK"

              # Create standard upgrade issue
              issueTitle="Weekly .NET Version Upgrade Report - $(date +%Y-%m-%d)"
              issueBody="## üìã Weekly .NET Version Upgrade Report


               # Add each project to the issue body
              upgrade_count=0
              for projectPath in "${upgradeProjects[@]}"; do
                # Convert absolute path to relative path
                relativePath="${projectPath#/github/workspace/}"

                echo "Processing project: $relativePath"

                # Check if the file exists
                if [[ ! -f "$relativePath" ]]; then
                  echo "Project file does not exist: $relativePath, skipping..."
                  continue
                fi

                # Check current target framework
                currentFramework=$(grep -oP '<TargetFramework>\K[^<]*' "$relativePath" 2>/dev/null || echo "unknown")
                
                # Skip if already on target framework
                if [[ "$currentFramework" == "$TARGET_FRAMEWORK" ]]; then
                  echo "Project $relativePath is already on $TARGET_FRAMEWORK, skipping..."
                  continue
                fi

                issueBody="${issueBody}
             - [ ] **$relativePath**
               - Current: \`$currentFramework\`
               - Target: \`$TARGET_FRAMEWORK\`"
                
                             ((upgrade_count++))
                           done

              # Only create issue if we have projects to upgrade
              if [[ $upgrade_count -gt 0 ]]; then
                issueBody="${issueBody}


                # Create the standard upgrade issue
                gh issue create \
                    --title "$issueTitle" \
                    --body "$issueBody" \
                    --label "enhancement"

                echo "‚úÖ Successfully created standard upgrade issue: $issueTitle"
              else
                echo "‚ÑπÔ∏è  All projects are already on target framework $TARGET_FRAMEWORK"
              fi
            fi
          else
            echo "‚ÑπÔ∏è  No standard version upgrades needed from dotnet versionsweeper."
          fi
   

          


        