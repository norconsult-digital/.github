name: "dotnet version checker"

on:
  workflow_call:
    inputs:
      support:
        description: "The support level to target (STS, LTS, or Preview)."
        type: string
        required: true
        default: "STS"

jobs:
  version-sweep:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup .NET 9 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
          
      - name: .NET version sweeper
        id: dotnet-version-sweeper
        uses: dotnet/versionsweeper@v4.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          owner: ${{ github.repository_owner }}
          name: ${{ github.repository }}
          branch: ${{ github.ref }}

      - name: Create upgrade issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check .NET 6 expiring soon
          current_date=$(date +%s)
          net6_expire=$(date -d "2024-11-12" +%s)
          warning_date=$((current_date + 90*24*60*60))
          
          if [[ $net6_expire -le $warning_date ]]; then
            net6_projects=$(find . -name "*.csproj" -exec grep -l "net6.0" {} \; 2>/dev/null || true)
            if [[ -n "$net6_projects" ]]; then
              echo "## 🚨 .NET 6 LTS Expiring" > lts_issue.txt
              echo "" >> lts_issue.txt
              echo "**Expires:** November 12, 2024" >> lts_issue.txt
              echo "" >> lts_issue.txt
              echo "### Projects:" >> lts_issue.txt
              echo "$net6_projects" | sed 's|^\./||; s/^/- /' >> lts_issue.txt
              echo "" >> lts_issue.txt
              echo "**Action:** Update to .NET 8 LTS" >> lts_issue.txt
              
              gh issue create \
                --title "⚠️ .NET 6 LTS Expiring - $(date +%Y-%m-%d)" \
                --body-file lts_issue.txt \
                --label "critical"
            fi
          fi

          # Handle standard upgrades
          upgradeProjects='${{ steps.dotnet-version-sweeper.outputs.upgrade-projects }}'
          
          if [[ -n "$upgradeProjects" && "$upgradeProjects" != "null" && "$upgradeProjects" != "[]" ]]; then
            case "${{ inputs.support }}" in
              "LTS") TARGET="net8.0" ;;
              "Preview") TARGET="net10.0" ;;
              *) TARGET="net9.0" ;;
            esac
            
            echo "## 📋 .NET Upgrade Report" > upgrade_issue.txt
            echo "" >> upgrade_issue.txt
            echo "**Target:** $TARGET" >> upgrade_issue.txt
            echo "" >> upgrade_issue.txt
            echo "### Projects:" >> upgrade_issue.txt
            
            echo "$upgradeProjects" | jq -r '.[]' | while read -r project; do
              relativePath="${project#/github/workspace/}"
              if [[ -f "$relativePath" ]]; then
                current=$(grep -oP '<TargetFramework>\K[^<]*' "$relativePath" 2>/dev/null || echo "unknown")
                echo "- [ ] $relativePath (\`$current\` → \`$TARGET\`)" >> upgrade_issue.txt
              fi
            done 2>/dev/null || echo "- No projects found" >> upgrade_issue.txt
            
            echo "" >> upgrade_issue.txt
            echo "**Action:** Update \`<TargetFramework>\` in .csproj files" >> upgrade_issue.txt
            
            gh issue create \
                --title "Weekly .NET Upgrade - $(date +%Y-%m-%d)" \
                --body-file upgrade_issue.txt \
                --label "enhancement"
          fi
