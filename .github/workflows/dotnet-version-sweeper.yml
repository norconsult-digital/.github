name: "dotnet version checker"

on:
  workflow_call:
    inputs:
      support:
        description: "The support level to target (STS, LTS, or Preview)."
        type: string
        required: true
        default: "STS"

jobs:
  version-sweep:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read
   env:
      SUPPORT_LEVEL: ${{ inputs.support }}
    

    steps:
      - uses: actions/checkout@v4
      - name: List all files in workspace for debugging
        run: ls -R $GITHUB_WORKSPACE
      
      - name: Setup .NET 9 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
          
      - name: Run tests
        run: dotnet test "$GITHUB_WORKSPACE/fluent-assertions-alternatives/Shouldly.Test/Shouldly.Test.csproj"

      - name: .NET version sweeper
        id: dotnet-version-sweeper
        uses: dotnet/versionsweeper@v4.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          owner: ${{ github.repository_owner }}
          name: ${{ github.repository }}
          branch: ${{ github.ref }}

      # Add this step before your "Create pull requests" step
      - name: Configure Git User
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
             
      - name: Create pull requests
        if: steps.dotnet-version-sweeper.outputs.has-remaining-work == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x
         
          # Install jq if not available (optional)
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Parse the JSON array of projects into a bash array
          upgradeProjectsJson='${{ steps.dotnet-version-sweeper.outputs.upgrade-projects }}'
          mapfile -t upgradeProjects < <(echo "$upgradeProjectsJson" | jq -r '.[]')

          echo "Projects to upgrade: ${upgradeProjects[*]}"

          # Install .NET Upgrade Assistant global tool
          dotnet tool install --global upgrade-assistant

          # Iterate all upgrade projects
          for projectDir in "${upgradeProjects[@]}"; do
            echo "Upgrading project: $projectDir"

            # Sanitize branch name: get only the folder or project filename without extension
            safeBranchName=$(basename "$projectDir" .csproj)

            # Create a new branch with the sanitized name
            git checkout -b "upgrade/$safeBranchName"

            # Perform the upgrade using upgrade-assistant
            upgrade-assistant upgrade "$projectDir" --non-interactive -t ${{ inputs.support }}

            # Commit the changes
            git add .
            git commit -m ".NET Version Sweeper: Upgraded $projectDir"

            # Push the branch to the repository
            git push origin "upgrade/$safeBranchName"

            # Create a pull request
            gh pr create \
              --base main \
              --head "upgrade/$safeBranchName" \
              --title "Upgraded $safeBranchName" \
              --body "Proposed upgrade for $projectDir"
          done
