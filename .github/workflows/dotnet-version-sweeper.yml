name: "dotnet version checker"

on:
  workflow_call:
    inputs:
      support:
        description: "The support level to target (STS, LTS, or Preview)."
        type: string
        required: true
        default: "STS"

jobs:
  version-sweep:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: .NET version sweeper
        id: dotnet-version-sweeper
        uses: dotnet/versionsweeper@v4.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          owner: ${{ github.repository_owner }}
          name: ${{ github.repository }}
          branch: ${{ github.ref }}
          
          
      
      - name: Create pull requests
        if: steps.dotnet-version-sweeper.outputs.has-remaining-work == 'true'
        run: |
          upgradeProjects="${{ steps.dotnet-version-sweeper.outputs.upgrade-projects }}"
           
           echo "Raw upgrade projects output:"
           echo "$upgradeProjects"

    # Remove brackets and commas, then split into an array
           upgradeProjectsClean=$(echo "$upgradeProjects" | tr -d '[],')

    # Turn into array
           read -r -a projectsArray <<< "$upgradeProjectsClean"

    # Configure git identity
           git config user.name "github-actions[bot]"
           git config user.email "github-actions[bot]@users.noreply.github.com"

           # Install .NET Upgrade Assistant and add to PATH
           dotnet tool install --global upgrade-assistant
           export PATH="$PATH:$HOME/.dotnet/tools"

           for projectPath in "${projectsArray[@]}"; do
             echo "Processing project path: $projectPath"

            # Create a safe branch name using only the project name
             projectName=$(basename "$projectPath" .csproj)
             branchName="upgrade-${projectName}"

             echo "Using branch: $branchName"

             # Create and switch to the branch
             git checkout -b "$branchName"

             # Run the upgrade on the .csproj file
             upgrade-assistant upgrade "$projectPath" --non-interactive -t ${{ inputs.support }}

            # Commit and push the changes
             git add .
             git commit -m ".NET Version Sweeper: Upgraded $projectName"
             git push origin "$branchName"

            # Create a PR
             gh pr create \
               --base main \
               --head "$branchName" \
               --title "Upgraded $projectName" \
               --body "Proposed upgrade for $projectPath"
           done
