name: "dotnet version checker"

on:
  workflow_call:
    inputs:
      support:
        description: "The support level to target (STS, LTS, or Preview)."
        type: string
        required: true
        default: "STS"

jobs:
  version-sweep:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 
      
      - name: Setup .NET 9 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
          
      - name: .NET version sweeper
        id: dotnet-version-sweeper
        uses: dotnet/versionsweeper@v4.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          owner: ${{ github.repository_owner }}
          name: ${{ github.repository }}
          branch: ${{ github.ref }}

      # Add this step before your "Create pull requests" step
      - name: Configure Git User
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
             
      - name: Check for LTS versions expiring within 90 days
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Checking for LTS versions expiring within 90 days..."
          
          # Simple date calculation: current date + 90 days
          warning_date=$(date -d "+90 days" +%s)
          net6_expire=$(date -d "2024-11-12" +%s)
          net8_expire=$(date -d "2026-11-10" +%s)
          
          # Find expiring projects
          expiring_projects=""
          
          # Check .NET 6 projects
          if [[ $net6_expire -le $warning_date ]]; then
            net6_projects=$(find . -name "*.csproj" -exec grep -l "net6.0" {} \; 2>/dev/null || true)
            if [[ -n "$net6_projects" ]]; then
              expiring_projects="$expiring_projects\n.NET 6.0 Projects (Expires Nov 12, 2024):\n$net6_projects"
            fi
          fi
          
          # Check .NET 8 projects  
          if [[ $net8_expire -le $warning_date ]]; then
            net8_projects=$(find . -name "*.csproj" -exec grep -l "net8.0" {} \; 2>/dev/null || true)
            if [[ -n "$net8_projects" ]]; then
              expiring_projects="$expiring_projects\n.NET 8.0 Projects (Expires Nov 10, 2026):\n$net8_projects"
            fi
          fi
          
          # Create issue if we found expiring projects
          if [[ -n "$expiring_projects" ]]; then
            echo "🚨 Creating LTS expiration warning issue..."
            
            cat > issue_body.txt << 'EOF'
          ## 🚨 LTS .NET Versions Expiring Within 90 Days
           **Generated on:** $(date)
          
          ### Projects needing attention:
          EOF
          
            echo -e "$expiring_projects" >> issue_body.txt
            
            cat >> issue_body.txt << 'EOF'
          
          ### 🔧 Action Required:
          - Update expired projects to .NET 8 LTS immediately
          - Plan upgrades for projects expiring soon
          
          ### 📚 Resources:
          - [.NET Release Schedule](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)
          - [Migration Guide](https://docs.microsoft.com/en-us/dotnet/core/migration/)
          EOF
          
            gh issue create \
                --title "⚠️ LTS .NET Versions Expiring - $(date +%Y-%m-%d)" \
                --body-file issue_body.txt \
                --label "critical,lts-expiring"
                
            echo "✅ Created LTS expiration issue"
          else
            echo "✅ No LTS versions expiring within 90 days"
          fi

      - name: Create upgrade issue from versionsweeper results
        if: steps.dotnet-version-sweeper.outputs.has-remaining-work == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "📋 Creating standard upgrade issue..."
          
          # Get target framework
          case "${{ inputs.support || 'STS' }}" in
            "STS") TARGET="net9.0" ;;
            "LTS") TARGET="net8.0" ;;
            "Preview") TARGET="net10.0" ;;
            *) TARGET="net9.0" ;;
          esac
          
          # Get projects to upgrade
          PROJECTS='${{ steps.dotnet-version-sweeper.outputs.upgrade-projects }}'
          
          cat > upgrade_issue.txt << EOF
          ## 📋 Weekly .NET Version Upgrade Report
          
          **Target Framework:** $TARGET
          **Generated on:** $(date)
          
          ### Projects to upgrade:
          EOF
          
          # Add projects to the issue (simple approach)
          echo "$PROJECTS" | jq -r '.[]' | while read -r project; do
            echo "- [ ] $project" >> upgrade_issue.txt
          done
          
          cat >> upgrade_issue.txt << 'EOF'
          
          ### 🔧 Steps:
          1. Update `<TargetFramework>` in each .csproj file
          2. Run `dotnet build` to test
          3. Create PR when ready

          ---
          *Auto-generated by .NET Version Sweeper*
          EOF
          
          gh issue create \
              --title "Weekly .NET Upgrade Report - $(date +%Y-%m-%d)" \
              --body-file upgrade_issue.txt \
              --label "enhancement"
              
          echo "✅ Created standard upgrade issue"
          
