name: "dotnet version checker"

on:
  workflow_call:
    inputs:
      support:
        description: "The support level to target (STS, LTS, or Preview)."
        type: string
        required: true
        default: "STS"

jobs:
  version-sweep:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET 9 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: .NET version sweeper
        id: dotnet-version-sweeper
        uses: dotnet/versionsweeper@v4.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          owner: ${{ github.repository_owner }}
          name: ${{ github.repository }}
          branch: ${{ github.ref }}
          dir: ./          # Ensure the JSON file is in the root of this path
          config-file: dotnet-versionsweeper.json

      - name: Create upgrade issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check for LTS versions expiring within 90 days
          current_date=$(date +%s)
          warning_date=$((current_date + 90*24*60*60))

          # Check .NET 6 projects
          net6_expire=$(date -d "2024-11-12" +%s)
          if [[ $net6_expire -le $warning_date ]]; then
            net6_projects=$(find . -name "*.csproj" -exec grep -l "net6.0" {} \; 2>/dev/null || true)
            if [[ -n "$net6_projects" ]]; then
              cat > lts_issue.txt << 'EOF'
          ## üö® LTS .NET Version Expiration Warning

          **Generated:** $(date)
          **Warning Threshold:** 90 days

          ### Projects using LTS versions expiring soon:
          EOF
              echo "$net6_projects" | sed 's|^\./||; s/^/- üî¥ **EXPIRED** /' >> lts_issue.txt
              cat >> lts_issue.txt << 'EOF'

          ### Action Required:
          - Update expired projects to .NET 8 LTS immediately
          - No longer receiving security updates

          ---
          *Auto-generated by .NET Version Sweeper*
          EOF

              gh issue create \
                --title "‚ö†Ô∏è URGENT: LTS .NET Versions Expiring Within 90 Days - $(date +%Y-%m-%d)" \
                --body-file lts_issue.txt \
                --label "critical,lts-expiring"
                
              echo "‚úÖ Successfully created LTS expiration warning issue"
            fi
          fi

          # Handle standard version upgrades from dotnet versionsweeper
          upgradeProjectsJson='${{ steps.dotnet-version-sweeper.outputs.upgrade-projects }}'

          if [[ -n "$upgradeProjectsJson" && "$upgradeProjectsJson" != "null" && "$upgradeProjectsJson" != "[]" ]]; then
            mapfile -t upgradeProjects < <(echo "$upgradeProjectsJson" | jq -r '.[]')

            if [[ ${#upgradeProjects[@]} -gt 0 ]]; then
              # Define target framework based on support level
              case "${{ inputs.support || 'STS' }}" in
                "STS") TARGET_FRAMEWORK="net9.0" ;;
                "LTS") TARGET_FRAMEWORK="net8.0" ;;
                "Preview") TARGET_FRAMEWORK="net10.0" ;;
                *) TARGET_FRAMEWORK="net9.0" ;;
              esac

              cat > upgrade_issue.txt << EOF
          ## üìã Weekly .NET Version Upgrade Report

          **Target Framework:** $TARGET_FRAMEWORK
          **Generated:** $(date)

          ### Projects requiring upgrade:
          EOF

              upgrade_count=0
              for projectPath in "${upgradeProjects[@]}"; do
                relativePath="${projectPath#/github/workspace/}"
                if [[ -f "$relativePath" ]]; then
                  currentFramework=$(grep -oP '<TargetFramework>\K[^<]*' "$relativePath" 2>/dev/null || echo "unknown")
                  if [[ "$currentFramework" != "$TARGET_FRAMEWORK" ]]; then
                    echo "- [ ] **$relativePath** - Current: \`$currentFramework\` ‚Üí Target: \`$TARGET_FRAMEWORK\`" >> upgrade_issue.txt
                    ((upgrade_count++))
                  fi
                fi
              done

              if [[ $upgrade_count -gt 0 ]]; then
                cat >> upgrade_issue.txt << 'EOF'

          ### Manual Steps Required:
          1. Update `<TargetFramework>` in each .csproj file
          2. Test with `dotnet build` and `dotnet test`
          3. Create pull requests for the changes

          ---
          *Auto-generated by .NET Version Sweeper*
          EOF

                 gh issue create \
                   --title "Weekly .NET Version Upgrade Report - $(date +%Y-%m-%d)" \
                   --body-file upgrade_issue.txt \
                   --label "enhancement"

                 echo "‚úÖ Successfully created standard upgrade issue"
               else
                 echo "‚ÑπÔ∏è All projects are already on target framework $TARGET_FRAMEWORK"
               fi
             fi
           else
             echo "‚ÑπÔ∏è No standard version upgrades needed from dotnet versionsweeper."
           fi

           echo "‚úÖ Workflow completed"
