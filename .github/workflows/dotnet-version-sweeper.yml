name: "dotnet version checker"

on:
  schedule:
    - cron: '0 9 * * 3'  # Run every Wednesday at 9:00 AM UTC
  workflow_dispatch:     # Allow manual triggering
  workflow_call:
    inputs:
      support:
        description: "The support level to target (STS, LTS, or Preview)."
        type: string
        required: true
        default: "STS"

jobs:
  version-sweep:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: write
    env:
      SUPPORT_LEVEL: ${{ inputs.support || 'STS' }} 

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 
          
      - name: List all files in workspace for debugging
        run: ls -R $GITHUB_WORKSPACE
      
      - name: Setup .NET 9 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
          
      - name: Run tests
        run: dotnet test "$GITHUB_WORKSPACE/fluent-assertions-alternatives/Shouldly.Test/Shouldly.Test.csproj"

      - name: .NET version sweeper
        id: dotnet-version-sweeper
        uses: dotnet/versionsweeper@v4.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          owner: ${{ github.repository_owner }}
          name: ${{ github.repository }}
          branch: ${{ github.ref }}

      # Add this step before your "Create pull requests" step
      - name: Configure Git User
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
             
      - name: Create issues for updates
        if: steps.dotnet-version-sweeper.outputs.has-remaining-work == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x
   
          # Install jq if not available 
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Parse the JSON array of projects into a bash array
          upgradeProjectsJson='${{ steps.dotnet-version-sweeper.outputs.upgrade-projects }}'

          # Check if upgradeProjectsJson is empty or null
          if [[ -z "$upgradeProjectsJson" || "$upgradeProjectsJson" == "null" || "$upgradeProjectsJson" == "[]" ]]; then
            echo "No projects to upgrade"
            exit 0
          fi

          mapfile -t upgradeProjects < <(echo "$upgradeProjectsJson" | jq -r '.[]')

          # Check if array is empty
          if [[ ${#upgradeProjects[@]} -eq 0 ]]; then
            echo "No projects to upgrade"
            exit 0
          fi

          echo "Projects to upgrade: ${upgradeProjects[*]}"

          # Define target framework based on support level
          case "${{ inputs.support || 'STS' }}" in
            "STS") TARGET_FRAMEWORK="net9.0" ;;
            "LTS") TARGET_FRAMEWORK="net8.0" ;;
            "Preview") TARGET_FRAMEWORK="net10.0" ;;
            *) TARGET_FRAMEWORK="net9.0" ;;
          esac

          echo "Target framework: $TARGET_FRAMEWORK"

          # Create issue title and body
          issueTitle="Weekly .NET Version Upgrade Report - $(date +%Y-%m-%d)"
          issueBody="## ðŸ“‹ Weekly .NET Version Upgrade Report"


          # Add each project to the issue body
          for projectPath in "${upgradeProjects[@]}"; do
            # Convert absolute path to relative path
            relativePath="${projectPath#/github/workspace/}"

            echo "Processing project: $relativePath"

            # Check if the file exists
            if [[ ! -f "$relativePath" ]]; then
              echo "Project file does not exist: $relativePath, skipping..."
              continue
            fi

            # Check current target framework
            currentFramework=$(grep -oP '<TargetFramework>\K[^<]*' "$relativePath" 2>/dev/null || echo "unknown")
            
            # Skip if already on target framework
            if [[ "$currentFramework" == "$TARGET_FRAMEWORK" ]]; then
              echo "Project $relativePath is already on $TARGET_FRAMEWORK, skipping..."
              continue
            fi

            issueBody="${issueBody}
          - [ ] **$relativePath**
            - Current: \`$currentFramework\`
            - Target: \`$TARGET_FRAMEWORK\`"
          done
          issueBody="${issueBody}"



           # Create the issue
          gh issue create \
              --title "$issueTitle" \
              --body "$issueBody" \
              --label "enhancement"

          echo "âœ… Successfully created issue: $issueTitle"



         