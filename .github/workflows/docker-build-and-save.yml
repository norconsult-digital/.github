name: Docker Build and Save Workflow

on:
  workflow_call:
    inputs:
      vmImage:
        type: string
        default: "ubuntu-latest"
        required: false
      dockerFile:
        required: true
        type: string
      dockerBuildContext:
        required: false
        default: "."
        type: string
      dockerBuildArguments:
        required: false
        default: ""
        type: string
      repositoryName:
        required: true
        type: string
      gitRepo:
        required: false
        default: ""
        type: string
      artifactName:
        required: false
        default: "container-image"
        type: string

jobs:
  build-and-save-docker-image:
    runs-on: ${{ inputs.vmImage }}
    name: Docker Build and Save
    steps:
      - name: Conditional Checkout
        if: ${{ inputs.gitRepo != '' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.gitRepo }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Default Checkout
        if: ${{ inputs.gitRepo == '' }}
        uses: actions/checkout@v4

      - name: Replace GitHub Packages feed token in NuGet.Config files
        shell: pwsh
        run: |
          $nugetFiles = Get-ChildItem -Path $env:GITHUB_WORKSPACE -Filter "NuGet.Config" -Recurse
          foreach ($file in $nugetFiles) {
              $content = Get-Content $file.FullName -Raw
              if ($content -match '<NorconsultDigital>') {
                  if ($content -match '<add key="ClearTextPassword" value="[^"]*"') {
                      $content = $content -replace '<add key="ClearTextPassword" value="[^"]*" />', "<add key=`"ClearTextPassword`" value=`"${{ secrets.GITHUB_TOKEN }}`" />"
                  }
                  Set-Content -Path $file.FullName -Value $content
              }
          }

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.dockerBuildContext }}
          file: ${{ inputs.dockerFile }}
          tags: ${{ inputs.repositoryName }}:tmp
          build-args: ${{ inputs.dockerBuildArguments }}
          load: true

      - name: Save Docker Image
        run: |
          mkdir -p artifact
          docker save ${{ inputs.repositoryName }}:tmp -o artifact/image.tar

      - name: Upload Docker Image as Artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifactName }}
          path: artifact/image.tar
