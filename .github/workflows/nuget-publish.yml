name: Nuget Publish

on:
  workflow_call:
    inputs:
      vmImage:
        required: false
        type: string
        default: "ubuntu-latest"
      environment:
        required: true
        type: string
      environmentName:
        required: true
        type: string
      projectDir:
        required: true
        type: string
      buildConfiguration:
        required: true
        type: string
      deployAllEnvironments:
        required: false
        type: boolean
        default: false
      dotnetVersion:
        required: false
        default: "8.*"
        type: string
    secrets:
      ADO_NUGET_PAT:
        required: true
      NUGET_GITHUB_PAT:
        required: false

jobs:
  deploy:
    runs-on: ${{ inputs.vmImage }}
    if: ${{ inputs.deployAllEnvironments == true || ((contains(github.ref_name, 'main') || contains(github.ref_name, 'release')) && ((contains(github.ref_name, 'main') && inputs.environmentName == 'test') || (!contains(github.ref_name, 'main') && (inputs.environmentName == 'stage' || inputs.environmentName == 'prod')))) }}
    environment: ${{ inputs.environment }}
    steps:
      - name: Download nuget sources
        uses: actions/download-artifact@v5
        with:
          name: nuget-sources
          path: ${{ github.workspace }}/nuget-sources

      - name: Setup dotnet ${{ inputs.dotnetVersion }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnetVersion }}

      - name: Set environment-specific variables
        run: |
          if [[ "${{ inputs.environmentName }}" == "test" ]]; then
            echo "preLabel=dev" >> $GITHUB_ENV
            echo "addVersionSuffix=true" >> $GITHUB_ENV
          elif [[ "${{ inputs.environmentName }}" == "stage" ]]; then
            echo "preLabel=rc" >> $GITHUB_ENV
            echo "addVersionSuffix=true" >> $GITHUB_ENV
          elif [[ "${{ inputs.environmentName }}" == "prod" ]]; then
            echo "preLabel=" >> $GITHUB_ENV
            echo "addVersionSuffix=false" >> $GITHUB_ENV
          fi

      - name: Set version suffix
        if: ${{ env.addVersionSuffix == 'true' }}
        run: |
          date=$(date +'%Y%m%d-%H%M%S')
          echo "isy_versionSuffix=${{ env.preLabel }}-$date" >> $GITHUB_ENV
        shell: bash

      - name: Replace ADO Nuget feed token in NuGet.Config
        run: |
          sed -i 's|<add key="ClearTextPassword" value="password" />|<add key="ClearTextPassword" value="${{ secrets.ADO_NUGET_PAT }}" />|' ${{ github.workspace }}/nuget-sources/nuget-config/NuGet.Config

      - name: Restore dependencies
        run: |
          for csproj in $(find ${{ github.workspace }}/nuget-sources/${{ inputs.projectDir }} -name "*.csproj"); do
            dotnet restore $csproj --configfile ${{ github.workspace }}/nuget-sources/nuget-config/NuGet.Config
          done

      - name: Dotnet Pack (with version suffix)
        if: ${{ env.addVersionSuffix == 'true' }}
        run: |
          for csproj in $(find ${{ github.workspace }}/nuget-sources/${{ inputs.projectDir }} -name "*.csproj"); do
            # Check if the Version element contains '$(VersionSuffix)'
            if grep -q '<Version>.*$(VersionSuffix)</Version>' "$csproj"; then
              # If $(VersionSuffix) is found, ensure the isy_versionSuffix starts with a hyphen
              version_suffix="-${{ env.isy_versionSuffix }}"
            else
              # If $(VersionSuffix) is not found, use the version suffix as is
              version_suffix="${{ env.isy_versionSuffix }}"
            fi

            # Execute dotnet pack with the conditionally set version suffix
            dotnet pack "$csproj" --configuration "${{ inputs.buildConfiguration }}" --no-restore --no-build --version-suffix "$version_suffix" --output "${{ github.workspace }}/nuget"
          done

      - name: Dotnet Pack (without version suffix)
        if: ${{ env.addVersionSuffix == 'false' }}
        run: |
          for csproj in $(find ${{ github.workspace }}/nuget-sources/${{ inputs.projectDir }} -name "*.csproj"); do
            dotnet pack "$csproj" --configuration "${{ inputs.buildConfiguration }}" --no-restore --no-build --output "${{ github.workspace }}/nuget"
          done

      - name: Dotnet Push to GitHub Packages
        env:
          CUSTOM_TOKEN: ${{ secrets.NUGET_GITHUB_PAT }}
          DEFAULT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TOKEN=${CUSTOM_TOKEN:-$DEFAULT_TOKEN}
          dotnet nuget push ${{ github.workspace }}/nuget/*.nupkg \
            --source "https://nuget.pkg.github.com/norconsult-digital/index.json" \
            --api-key "$TOKEN" --skip-duplicate

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          source-url: https://pkgs.dev.azure.com/Norconsult-IS/_packaging/isy360-packages/nuget/v3/index.json
          dotnet-version: ${{ inputs.dotnetVersion }}
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.ADO_NUGET_PAT }}

      - name: "Dotnet Push to Azure Artifacts"
        run: dotnet nuget push --api-key AzureArtifacts ${{ github.workspace }}/nuget/*.nupkg --skip-duplicate
