name: .NET Test

permissions:
  id-token: write
  contents: read

on:
  workflow_call:
    inputs:
      environment:
        required: false
        type: string
        default: "integration-test"
      vmImage:
        type: string
        default: "ubuntu-latest"
        required: false
      buildConfiguration:
        required: false
        type: string
        default: "Release"
      gitRepo:
        required: false
        type: string
        default: ""
      testProjects:
        required: true
        type: string
      dotnetVersion:
        required: false
        default: "7.*"
        type: string
      azureServicePrincipalClientId:
        required: false
        type: string
        default: ""
      azureTenantId:
        required: false
        type: string
        default: ""
jobs:
  dotnet-test:
    runs-on: ${{ inputs.vmImage }}
    environment: ${{ inputs.environment }}
    name: .NET Test

    steps:
      - name: Checkout repository
        if: ${{ inputs.gitRepo != '' }}
        uses: actions/checkout@v5
        with:
          repository: ${{ inputs.gitRepo }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Default checkout
        uses: actions/checkout@v5

      - name: Setup dotnet ${{ inputs.dotnetVersion }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnetVersion }}

      - name: Configure NuGet for GitHub Packages
        run: |
          dotnet nuget add source \
            --username ${{ github.actor }} \
            --password ${{ secrets.GITHUB_TOKEN }} \
            --store-password-in-clear-text \
            --name github "https://nuget.pkg.github.com/norconsult-digital/index.json"    

      - name: Azure Login via OIDC
        if: ${{ inputs.azureServicePrincipalClientId != '' && inputs.azureTenantId != '' }}
        uses: azure/login@v2
        with:
          client-id: ${{ inputs.azureServicePrincipalClientId }}
          tenant-id: ${{ inputs.azureTenantId }}
          allow-no-subscriptions: true

      - name: Pull Docker test image
        run: docker image pull testcontainers/ryuk

      - name: Replace GitHub Packages feed token in NuGet.Config files
        shell: pwsh
        run: |
          $nugetFiles = Get-ChildItem -Path $env:GITHUB_WORKSPACE -Filter "NuGet.Config" -Recurse
          foreach ($file in $nugetFiles) {
              $content = Get-Content $file.FullName -Raw
              if ($content -match '<NorconsultDigital>') {
                  if ($content -match '<add key="ClearTextPassword" value="[^"]*"') {
                      $content = $content -replace '<add key="ClearTextPassword" value="[^"]*" />', "<add key=`"ClearTextPassword`" value=`"${{ secrets.GITHUB_TOKEN }}`" />"
                  }
                  Set-Content -Path $file.FullName -Value $content
              }
          }

      - name: Run tests with build verification
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path test-results
          $projects = Get-ChildItem -Path ${{ inputs.testProjects }} -Recurse -Include '*[T|t]ests.csproj'
          foreach ($project in $projects) {
            $project_name = [System.IO.Path]::GetFileNameWithoutExtension($project.FullName)

            # Build the project explicitly
            dotnet build $project.FullName --configuration ${{ inputs.buildConfiguration }}
            if ($LASTEXITCODE -ne 0) {
              Write-Output "Build failed: $project_name"
              exit 1  # Stops execution if build fails
            }

            # Proceed to test
            dotnet test $project.FullName --configuration ${{ inputs.buildConfiguration }} --no-build --no-restore --logger "trx;LogFileName=$(Get-Location)/test-results/$project_name.trx" --verbosity quiet

            if ($LASTEXITCODE -ne 0) {
              Write-Output "Tests failed: $project_name"
            }
          }

      - name: Check for TRX files
        id: trx_check
        if: always()
        shell: bash
        run: |
          # List all files in the test-results directory for debugging purposes
          echo "Listing all files in the test-results directory:"
          ls -1 test-results/

          # Check specifically for TRX files and set output
          if ls test-results/*.trx 1> /dev/null 2>&1; then
            echo "TRX files found."
            echo "has_results=true" >> $GITHUB_OUTPUT
          else
            echo "No TRX files found."
            echo "has_results=false" >> $GITHUB_OUTPUT
          fi

      - name: Report test results
        if: always() && steps.trx_check.outputs.has_results == 'true'
        uses: phoenix-actions/test-reporting@v15
        with:
          name: .NET Tests
          path: test-results/*.trx
          reporter: dotnet-trx
          output-to: "step-summary"
