name: "POEditor Download Workflow"
on:
  workflow_call:
    inputs:
      languages:
        required: true
        type: string
        description: "Space-separated list of languages to download translations for"
      outputPath:
        required: true
        type: string
        description: "Output path for the downloaded translation files"
      projectId:
        required: true
        type: string
    secrets:
      API_KEY:
        required: true

jobs:
  download-and-commit:
    runs-on: ubuntu-latest
    name: POEditor Download
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup jq
        run: sudo apt-get install jq

      - name: Download translations from POEditor
        run: |
          IFS=' ' read -ra LOCALES <<< "${{ inputs.languages }}"
          for locale in "${LOCALES[@]}"; do
            echo "Downloading translations for locale $locale"
            # Hent eksport-URL, men ta vare på hele responsen
            response=$(curl -s -X POST https://api.poeditor.com/v2/projects/export \
                        -F api_token="${{ secrets.API_KEY }}" \
                        -F id="${{ inputs.projectId }}" \
                        -F language="$locale" \
                        -F type="xlf")
            # Log responsen
            echo "Response from POEditor: $response"
            # Plukk ut URL som før
            result=$(echo "$response" | jq -r .result.url)
            curl -o "${{ inputs.outputPath }}/messages.$locale.xlf" "$result"
          done

      - name: Add changed xlf files, and push
        run: |
          set -e  # Exit on any non-zero exit code from commands within this step

          # Configure Git user information
          git config --global user.email "$GITHUB_ACTOR_EMAIL"
          git config --global user.name "$GITHUB_ACTOR - automatic"

          # Loop through xlf files and add changed files
          CHANGES_FOUND=false
          FILES="${{ inputs.outputPath }}/*.xlf"
          for file in $FILES; do
            if [ -f "$file" ] && ! git diff --quiet -- "$file"; then
              echo "Changes found in $file"
              git add "$file"
              CHANGES_FOUND=true
            else
              echo "No changes in $file"
            fi
          done

          # Commit changes if any
          if $CHANGES_FOUND; then
            # Pull before pushing to ensure there's no conflict or missing data
            git pull --no-rebase origin "${GITHUB_REF#refs/heads/}"
            git commit -m "Automatic workflow update xlf files in ${{ inputs.outputPath }}"            
            # Push changes
            git push origin HEAD:"${GITHUB_REF#refs/heads/}"
          else
            echo "No changes to commit."
          fi